<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>明朝的博客</title>
  
  <subtitle>小火箭</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-28T00:39:58.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小火箭</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/09/10/hello-world/"/>
    <id>http://yoursite.com/2019/09/10/hello-world/</id>
    <published>2019-09-09T17:03:49.896Z</published>
    <updated>2017-10-28T00:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>推荐系统三十六式--读书笔记（5-7 内容推荐）</title>
    <link href="http://yoursite.com/2019/05/06/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E4%B8%89%E5%8D%81%E5%85%AD%E5%BC%8F--%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%885-7%20%E5%86%85%E5%AE%B9%E6%8E%A8%E8%8D%90%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/06/推荐系统三十六式--读书笔记（5-7 内容推荐）/</id>
    <published>2019-05-05T16:00:00.000Z</published>
    <updated>2019-09-10T15:23:11.314Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://time.geekbang.org/column/intro/74" target="_blank" rel="noopener">参考原作：推荐系统三十六式-刑无刀</a></p><h2 id="5-【内容推荐】画鬼容易画人难：用户画像的“能”和“不能”"><a href="#5-【内容推荐】画鬼容易画人难：用户画像的“能”和“不能”" class="headerlink" title="5.【内容推荐】画鬼容易画人难：用户画像的“能”和“不能”"></a>5.【内容推荐】画鬼容易画人难：用户画像的“能”和“不能”</h2><h4 id="什么是用户画像"><a href="#什么是用户画像" class="headerlink" title="什么是用户画像"></a><strong>什么是用户画像</strong></h4><p>英文可以分为Personas 和 User Profile。</p><ul><li>Personas 属于交互设计领域的概念。</li><li>UserProfile原本用于营销领域。（推荐系统中的）</li></ul><p>推荐系统一般是对用户和物品之间的匹配评分，也就是预测用户评分或者偏好。推荐系统在对匹配评分前，则首先就要将用户和物品都向量化，这样才能进行计算。</p><p><strong>建立用户画像的关键因素：第一个是维度，第二个是量化。</strong></p><p>对于维度，三个特点：</p><blockquote><p>1    每个维度的名称都是可理解的。<br>2    维度的数量是我拍脑袋定的。<br>3    有哪些维度也是我拍脑袋确定的。 </p></blockquote><p>其次是量化，构建方法分成三类：</p><blockquote><ol><li>构建方法分成三类。<br>直接使用原始数据作为用户画像的内容，如注册资料等人口统计学信息，或者购买历史，阅读历史等，除了数据清洗等工作，数据本身并没有做任何抽象和归纳。通常对于用户冷启动等场景非常有用。</li><li>第二类就是堆数据。<br>做统计工作，这是最常见的用户画像数据，常见的兴趣标签，就是这一类，就是从历史行为数据中去挖掘出标签，然后在标签维度上做数据统计，用统计结果作为量化结果。</li><li>第三类就是黑盒子。<br>就是用机器学习方法，学习出人类无法直观理解的稠密向量。比如使用潜语义模型构建用户阅读兴趣，或者使用矩阵分解得到的隐因子，或者使用深度学习模型学习用户的 Embedding 向量。</li></ol></blockquote><hr><h2 id="6-【内容推荐】从文本到用户画像有多远"><a href="#6-【内容推荐】从文本到用户画像有多远" class="headerlink" title="6.【内容推荐】从文本到用户画像有多远"></a>6.【内容推荐】从文本到用户画像有多远</h2><p>基于内容推荐离不开为用户构建一个初级的画像，这种初级的画像一般叫做用户画像（User Profile），一些大厂内部还习惯叫做 UP。</p><p>从文本开始用户这一端比如说有： </p><blockquote><ol><li>注册资料中的姓名、个人签名； </li><li>发表的评论、动态、日记等； </li><li>聊天记录。</li></ol></blockquote><p>物品的一端：</p><blockquote><ol><li>物品的标题、描述； </li><li>物品本身的内容（一般指新闻资讯类）； </li><li>物品的其他基本属性的文本。 </li></ol></blockquote><p>构建用户画像所需要的两步：</p><blockquote><ol><li>把所有非结构化的文本结构化，去粗取精，保留关键信息；   </li><li>根据用户行为数据把物品的结构化结果传递给用户，与用户自己的结构化信息合并。</li></ol></blockquote><h3 id="结构化文本"><a href="#结构化文本" class="headerlink" title="结构化文本"></a><strong>结构化文本</strong></h3><p>物品端的文本信息，可以利用成熟的 NLP 算法分析得到的信息：</p><blockquote><ol><li>关键词提取：最基础的标签来源，也为其他文本分析提供基础数据，常用 <strong>TF-IDF 和 TextRank</strong>。 </li><li>实体识别：人物、位置和地点、著作、影视剧、历史事件和热点事件等，常用基于词典的方法结合 <strong>CRF</strong> 模型。</li><li>内容分类：将文本按照分类体系分类，用分类来表达较粗粒度的结构化信息。</li><li>文本 ：在无人制定分类体系的前提下，无监督地将文本划分成多个类簇也很常见，别看不是标签，类簇编号也是用户画像的常见构成。</li><li>主题模型：从大量已有文本中学习主题向量，然后再预测新的文本在各个主题上的概率分布情况，也很实用，其实这也是一种聚类思想，主题向量也不是标签形式，也是用户画像的常用构成。</li><li>嵌入：也叫作 Embedding，从词到篇章，无不可以学习这种嵌入表达。嵌入表达是为了挖掘出字面意思之下的语义信息，并且用有限的维度表达出来。写留言下面我来介绍几种常用的文本结构化算法。 </li></ol></blockquote><h4 id="1-TF-IDF"><a href="#1-TF-IDF" class="headerlink" title="1).TF-IDF"></a><strong>1).TF-IDF</strong></h4><p>TF 全称就是 Term Frequency，是词频的意思，IDF 就是 Inverse Document Frequency 是逆文档频率的意思。<br><strong>思想：在一篇文字中反复出现的词会更重要，在所有文本中都出现的词更不重要。</strong></p><blockquote><p>TF 和 IDF 两个指标：</p><ol><li>TF，就是词频，在要提取关键词的文本中出现的次数； </li><li>IDF，是提前统计好的，在已有的所有文本中，统计每一个词出现在了多少文本中，记为n，也就是文档频率，一共有多少文本，记为 N。那么IDF就为：<script type="math/tex; mode=display">IDF=log\frac{N}{n+1}</script></li></ol></blockquote><p>DF 的计算公式有这么几个特点： </p><ul><li>所有词的 N 都是一样的，因此出现文本数越少 (n) 的词，它的 IDF 值越大； </li><li>如果一个词的文档频率为 0，为防止计算出无穷大的 IDF，所以分母中有一个 1； </li><li>对于新词，本身应该 n 是 0，但也可以默认赋值为所有词的平均文档频率。 </li></ul><p>计算出 TF 和 IDF 后，将两个值相乘，就得到每一个词的权重。根据该权重筛选关键词的方式有： </p><ol><li>给定一个 K，取 Top K 个词，这样做简单直接，但也有一点，如果总共得到的词个数少于K，那么所有词都是关键词了，显然这样做不合理； </li><li>计算所有词权重的平均值，取在权重在平均值之上的词作为关键词；</li></ol><h4 id="2-TextRank"><a href="#2-TextRank" class="headerlink" title="2).TextRank"></a><strong>2).TextRank</strong></h4><p>TextRank与PageRank的思想类似，著名的 PageRank 算法是 Google 用来衡量网页重要性的算法。TextRank可以概括为：</p><blockquote><ol><li>文本中，设定一个窗口宽度，比如K个词，统计窗口内的词和词的共现关系，将其看成无向图。图就是网络，由存在连接关系的节点构成，所谓无向图，就是节点之间的连接关系不考虑从谁出发，有关系就对了； </li><li>所有词初始化的重要性都是 1； </li><li>每个节点把自己的权重平均分配给“和自己有连接“的其他节点； </li><li>每个节点将所有其他节点分给自己的权重求和，作为自己的新权重； </li><li>如此反复迭代第 3、4 两步，直到所有的节点权重收敛为止。 </li></ol></blockquote><h4 id="3-内容分类"><a href="#3-内容分类" class="headerlink" title="3).内容分类"></a><strong>3).内容分类</strong></h4><p>在门户网站时代，每个门户网站都有自己的频道体系，这就是个大的内容分类。移动互联网 UGC 时代，图文信息流 App 的资讯内容也需要被自动分类到不同的频道中。但，门户时代主要以长文本为主，可提取的信息量比较多，UGC时代短文本为主，分类较难。<strong>短文本分类方面经典的算法是 SVM，在工具上现在最常用的是 Facebook 开源的 FastText</strong></p><h4 id="4-实体识别"><a href="#4-实体识别" class="headerlink" title="4).实体识别"></a><strong>4).实体识别</strong></h4><p>命名实体识别（也常常被简称为 NER，Named-Entity Recognition）在 NLP 技术中常常被认为是序列标注问题，和分词、词性标注属于同一类问题。</p><blockquote><p>所谓序列标注问题，就是给你一个字符序列，从左往右遍历每个字符，一边遍历一边对每一个字符分类，分类的体系因序列标注问题不同而不同，<strong>通常的算法就是隐马尔科夫模型（HMM）或者条件随机场（CRF）</strong>： </p><ol><li>分词问题：对每一个字符分类为“词开始”“词中间”“词结束”三类之一； </li><li>词性标注：对每一个分好的词，分类为定义的词性集合的之一； </li><li>实体识别：对每一个分好的词，识别为定义的命名实体集合之一。</li></ol></blockquote><p>实体识别还有比较实用化的非模型做法：词典法。提前准备好各种实体的词典，使用 trie-tree 数据结构存储，拿着分好的词去词典里找，找到了某个词就认为是提前定义好的实体了。以实体识别为代表的序列标注问题上，工业级别的工具上 spaCy 比 NLTK 在效率上优秀一些。</p><h4 id="5-聚类"><a href="#5-聚类" class="headerlink" title="5).聚类"></a><strong>5).聚类</strong></h4><p>传统聚类方法在文本中的应用，今天逐渐被主题模型取代，同样是无监督模型，以 LDA 为代表的主题模型能够更准确地抓住主题，并且能够得到软聚类的效果，也就是说可以让一条文本属于多个类簇。<br>LDA 模型需要设定主题个数，如果你有时间，那么这个 K 可以通过一些实验来对比挑选，方法是：每次计算 K 个主题两两之间的平均相似度，选择一个较低的 K 值；如果你赶时间，在推荐系统领域，只要计算资源够用，主题数可以尽量多一些。</p><blockquote><p>另外，需要注意的是，得到文本在各个主题上的分布，可以保留概率最大的前几个主题作为文本的主题。LDA 工程上较难的是并行化，如果文本数量没到海量程度，提高单机配置也是可以的，<strong>开源的 LDA 训练工具有 Gensim，PLDA 等</strong>可供选择。</p></blockquote><h4 id="6-词嵌入"><a href="#6-词嵌入" class="headerlink" title="6).词嵌入"></a><strong>6).词嵌入</strong></h4><p>词嵌入，也叫作 Word Embedding。前面讲到的结构化方案，除了 LDA，其他都是得到一些标签，而这些标签无一例外都是稀疏的，而词嵌入则能够为每一个词学习得到一个稠密的向量。</p><p>向量可以做以下的事情： </p><ol><li>计算词和词之间的相似度，扩充结构化标签； </li><li>累加得到一个文本的稠密向量； </li><li>用于聚类，会得到比使用词向量聚类更好的语义聚类效果。</li></ol><p><strong>Word2Vec</strong> 是用浅层神经网络学习得到每个词的向量表达，Word2Vec 最大的贡献在于一些工程技巧上的优化，使得百万词的规模在单机上可以几分钟轻松跑出来，得到这些词向量后可以聚类或者进一步合成句子向量再使用。</p><h3 id="标签选择"><a href="#标签选择" class="headerlink" title="标签选择"></a><strong>标签选择</strong></h3><p>前面的介绍得到了诸如标签（关键词、分类等）、主题、词嵌入向量。接下来就是第二步：如何把物品的结构化信息给用户。<br>一种简单粗暴的办法是直接把用户产生过行为的物品标签累积在一起，但是这里要说的是另一种思路。我们把用户对物品的行为，消费或者没有消费看成是一个分类问题。用户用实际行动帮我们标注了若干数据，那么挑选出他实际感兴趣的特性就变成了特征选择问题。</p><p>最常用的是两个方法：<strong>卡方检验（CHI）和信息增益（IG）</strong>。基本思想是： </p><blockquote><ol><li>把物品的结构化内容看成文档； </li><li>把用户对物品的行为看成是类别； </li><li>每个用户看见过的物品就是一个文本集合； </li><li>在这个文本集合上使用特征选择算法选出每个用户关心的东西。 </li></ol></blockquote><h4 id="1-词嵌入"><a href="#1-词嵌入" class="headerlink" title="1).词嵌入"></a><strong>1).词嵌入</strong></h4><p>CHI 就是卡方检验，本身是一种特征选择方法。前面的 TF-IDF 和 TextRank 都是无监督关键词提取算法，而卡方检验则是有监督的。卡方检验本质上在检验“词和某个类别 C 相互独立”这个假设是否成立。</p><p>计算一个词 Wi 和一个类别 Cj 的卡方值，需要统计四个值：<br>| 卡方检验   | 属于类别$C_j$   |  不属于类别$C_j$  | 总计 |<br>|  :——-   | :——-  | :——  | :—— |<br>| 包含词$W_i$     | A |  B     | A+B  |<br>| 不包含$W_i$    |   C   |  D   |  C+D  |<br>| 总计        |    A+C    |  B+D  |  N=A+B+C+D  |</p><p>每个卡方值的计算：</p><script type="math/tex; mode=display">\mathcal X^2(W_i,C_j)=\frac{N(AD-BC)^2}{(A+C)(A+B)(B+D)(C+D)}</script><blockquote><ol><li>每个词和每个类别都要计算，只要对其中一个类别有帮助的词都应该留下； </li><li>由于是比较卡方值的大小，所以公式中的 N 可以不参与计算，因为它对每个词都一样，就是总的文本数； </li><li>卡方值越大，意味着偏离“词和类别相互独立”的假设越远，靠“词和类别互相不独立”这个备择假设越近。</li></ol></blockquote><h4 id="2-信息增益"><a href="#2-信息增益" class="headerlink" title="2).信息增益"></a><strong>2).信息增益</strong></h4><p>IG 即 Information Gain，信息增益，也是一种有监督的关键词选择方法。<br>另一个，对于信息商：</p><ol><li>各个类别的文本数量差不多时，信息熵就比较大。 </li><li>其中少数类别的文本数量明显较多时，信息熵就较小。</li></ol><p>信息增益计算分成三步：</p><ol><li>统计全局文本的信息熵； </li><li>统计每个词的条件熵，就是知道了一个词后再统计文本的信息熵，只不过这里要分别计算包含词和不包含词两部分的信息熵，再按照各自文本比例加权平均； </li><li>两者相减就是每个词的信息增益。</li></ol><blockquote><p>信息：$I=-log<em>2p(x_i)$<br>信息熵：$H=-\sum</em>{i=1}^np(x_i)log_2p(x_i)$<br>信息增益：分类前的信息熵-分类后的信息熵</p></blockquote><p>信息增益应用最广就是数据挖掘中的决策树分类算法，经典的决策树分类算法挑选分裂节点时就是计算各个属性的信息增益，始终挑选信息增益最大的节点作为分裂节点。<strong>卡方检验和信息增益不同之处在于：前者是针对每一个行为单独筛选一套标签出来，后者是全局统一筛选。</strong><br>这些方法都是在离线阶段批量完成的，把用户的画像生成配置成离线任务，每天更新一遍，次日就可以使用新的用户画像。</p><hr><h2 id="7-【内容推荐】超越标签的内容推荐系统"><a href="#7-【内容推荐】超越标签的内容推荐系统" class="headerlink" title="7.【内容推荐】超越标签的内容推荐系统"></a>7.【内容推荐】超越标签的内容推荐系统</h2><p>所谓的基于内容推荐，通俗讲，就是一个包装成推荐系统的信息检索系统。为什么基于内容的推荐系统这么重要呢？因为内容数据非常易得，哪怕是在一个产品刚刚上线，用心找的话总能找到一些可以使用的内容，不需要有用户行为数据就能够做出推荐系统的第一版。</p><blockquote><p>要把基于内容的推荐做好，需要做好“抓、洗、挖、算”:。</p><ol><li>抓：大厂们也在不断地抓数据丰富自己的内容，抓取数据补充内容源，增加分析的维度，两者必不可少。</li><li>洗：抓来的数据包含大量的脏数据，冗余的内容、垃圾内容、政治色情等敏感内容等等都需要被洗出去。</li><li>挖：不管是抓来还是自家的数据，都包含大量的潜在的价值信息。很多推荐系统提升效果并不是用了更复杂的推荐算法，而是对内容的挖掘做得更加深入。</li><li>算：匹配用户的兴趣和物品的属性，计算出更合理的相关性，这是推荐系统本身的使命，不仅仅是基于内容的推荐才要做的。</li></ol></blockquote><p><strong>内容推荐的框架</strong><br><a href="https://postimg.cc/z3xnBL0s" target="_blank" rel="noopener"><img src="https://i.postimg.cc/YqH8dYgC/image.jpg" alt="内容推荐的框架图"></a></p><ul><li>内容这一端：内容源经过内容分析，得到结构化的内容库和内容模型，也就是物品画像。</li><li>用户这一端：用户看过推荐列表后，会产生用户行为数据，结合物品画像，经过用户分析得到用户画像。</li></ul><p>内容源<br>在互联网中，抓数据是一件可做不可说的事情，哪怕是市值几千亿的大厂，也有专门的小分队抓数据，补充推荐系统每天的内容消耗。抓取后接着就是清洗数据，<strong>去重与识别垃圾内容、色情内容、政治敏感内容等都是必修课。</strong></p><p><strong>内容分析和用户分析</strong><br>基于内容的推荐，最重要的不是推荐算法，而是内容挖掘和分析。内容挖掘越深入，哪怕早期推荐算法仅仅是非常硬的规则，也能取得不俗的效果。举个例子，如果推荐物品是短视频，我们分几种情况看：</p><blockquote><ol><li>如果短视频本身没有任何结构化信息，如果不挖掘内容，那么除了强推或者随机小流量，没有别的合理曝光逻辑了；</li><li>如果对视频的文本描述，比如标题等能够有内容分类，比如是娱乐类，那么对于喜欢娱乐的用户来说就很合理；</li><li>如果能够进一步分析文本的主题，那么对于类似主题感兴趣的用户就可能得到展示；</li><li>如果还能识别出内容中主角是吴亦凡，那就更精准锁定一部分用户了；</li><li>如果再对内容本身做到嵌入分析，那么潜藏的语义信息也全部抓住，更能表达内容了。</li></ol></blockquote><p>随着内容分析的深入，能抓住的用户群体就越细致，推荐的转化率就越高，用户对产品的好感度也就增加了。</p><p>内容分析的产出有两个：</p><ol><li>结构化内容库；</li><li>内容分析模型。<br>容易被忽略的是第二个用途，在内容分析过程中得到的模型，比如说：</li><li>分类器模型；</li><li>主题模型；</li><li>实体识别模型；</li><li>嵌入模型。<br><strong>这些模型主要用在：当新的物品刚刚进入时，需要实时地被推荐出去，这时候对内容的实时分析，提取结构化内容，再与用户画像匹配。</strong></li></ol><p><strong>内容推荐算法</strong><br>最简单的推荐算法当然是计算相似性即可，用户的画像内容就表示为稀疏的向量，同时内容端也有对应的稀疏向量，两者之间计算余弦相似度，根据相似度对推荐物品排序。<br>虽然粗糙但是效果好，基于内容的推荐天然有一个优点：可解释性非常强。<br>如果再进一步，要更好地利用内容中的结构化信息，因为一个直观的认识是：不同字段的重要性不同。</p><p>对于资讯类，可以借鉴信息检索中的相关性计算方法来做推荐匹配计算：<strong>BM25F 算法。</strong></p><blockquote><p>前述的两种方法都不是机器学习方法，因为没有考虑推荐的目标。<br>机器学习一种最典型的场景：提高某种行为的转化率，如点击、收藏、转发等。那么标准的做法是：收集这类行为的日志数据，转换成训练样本，训练预估模型。<br>每一条样本由两部分构成：一部分是特征，包含用户端的画像内容，物品端的结构化内容，可选的还有日志记录时一些上下文场景信息，如时间、地理位置、设备等等，另一部分就是用户行为，作为标注信息，包含“有反馈”和“无反馈”两类。<br><strong>常用模型是逻辑回归（Logistic Regression）和梯度提升树（GBDT）或者两者的结合，即LR+GBDT。</strong></p></blockquote><p><strong>总结</strong><br>基于内容的推荐一般是推荐系统的起步阶段，而且会持续存在，它的重要性不可取代。因为：</p><ol><li>内容数据始终存在并且蕴含丰富的信息量，不好好利用就可惜了；</li><li>产品冷启动阶段，没有用户行为，别无选择；</li><li>新的物品要被推荐出去，首选内容推荐。<br><a href="https://postimg.cc/TLRNTK0Q" target="_blank" rel="noopener"><img src="https://i.postimg.cc/1tFkc6qx/image.jpg" alt="内容推荐"></a></li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://time.geekbang.org/column/intro/74&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考原作：推荐系统三十六式-刑无刀&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-【内容推荐】画鬼容易画人难：用户画像
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="论文解读" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
    
      <category term="推荐系统" scheme="http://yoursite.com/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统三十六式--读书笔记（1-4概念篇）</title>
    <link href="http://yoursite.com/2019/05/04/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E4%B8%89%E5%8D%81%E5%85%AD%E5%BC%8F--%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%881-4%20%E6%A6%82%E5%BF%B5%E7%AF%87%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/04/推荐系统三十六式--读书笔记（1-4 概念篇）/</id>
    <published>2019-05-03T16:00:00.000Z</published>
    <updated>2019-09-10T15:23:34.155Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://time.geekbang.org/column/intro/74" target="_blank" rel="noopener">参考原作: 推荐系统三十六式-刑无刀</a></p><h2 id="1-【开篇】用知识去对抗技术不平等"><a href="#1-【开篇】用知识去对抗技术不平等" class="headerlink" title="1.【开篇】用知识去对抗技术不平等"></a>1.【开篇】用知识去对抗技术不平等</h2><p>推荐系统从搜索引擎借鉴了不少技术和思想，比如内容有就来自由Amazon发扬光大的，基于用户（User-based)和基于物品（Item-based）的协同过滤将推荐系统技术从内容延伸到协同关系，超越了内容本身。</p><p>后来 Netflix 搞了一个瓜分百万美元的土豪比赛，以矩阵分解为代表的评分预测算法如雨后春笋般出现。至此，机器学习和推荐系统走得越来越近，最近十年，深度学习和强化学习又将推荐系统带向了新的高度。</p><p>推荐系统也是现在热门的 AI 分支之一，但凡AI类的落地，都需要具备这几个基本元素才行：数据、算法、场景、计算力。推荐系统也不例外。有一个趋势我是确信无疑的：世界在向网状发展，万事万物倾向于相互连接构成复杂网络。复杂网络具有无尺度特点，表现是：少数节点集聚了大量连接。这个现象不陌生，叫做马太效应，社交网络粉丝数、网页链接引用量、电商网站商品销量等等，无不如此。推荐系统的使命，就是要用技术来对抗这种不平等。</p><p><strong>一个推荐系统如何才能从 0 到 1 诞生，这需要去了解哪些知识</strong></p><ul><li>能解决系统起步阶段 80% 的问题</li><li>已被无数产品验证过有用的东西</li><li>遇到问题能够找到人或者社区交流，而非曲高和寡的前沿技术</li><li>知识之间有层次递进关系，也有分门别类的整理</li></ul><p><strong>共包含 36 篇文章，分成五个模块详细介绍推荐系统的相关知识</strong></p><ul><li>概念篇：介绍一些推荐系统有关的理念、思考、形而上的内容，虽然务虚但是必要</li><li>原理篇：推荐算法的原理介绍，是俗称的干货。知道推荐系统背后技术的基本原理后，你可以更快地开发自己的系统，更好地优化自己的系统，并且更容易去学习专栏中未涉及的内容</li><li>工程篇：推荐算法的实践内容。系统落地时需要一些纯工程上的大小事情，架构、选型、案例等</li><li>产品篇：推荐系统要成功，还要考虑产品理念及其商业价值，因此这部分介绍一些产品知识和一点浅显的商业思考</li><li>团队篇：从个人来说，就是该怎么学习和成长；从团队来说，就是该招多少人，该有哪些人，以及产品经理和工程师该如何合作等问题</li></ul><hr><h2 id="2-【概念篇】你真的需要个性化推荐系统吗"><a href="#2-【概念篇】你真的需要个性化推荐系统吗" class="headerlink" title="2.【概念篇】你真的需要个性化推荐系统吗?"></a>2.【概念篇】你真的需要个性化推荐系统吗?</h2><h4 id="什么是推荐系统？"><a href="#什么是推荐系统？" class="headerlink" title="什么是推荐系统？"></a><strong>什么是推荐系统？</strong></h4><p>按照维基百科的定义：它是一种信息过滤系统，手段是预测用户（User）对物品（Item）的评分和偏好。这个定义不是很好理解，也不恰当。它用“怎么做”来定义了“是什么”，这相当于变相规定了推荐系统的实现路径。</p><h4 id="换一个角度回答三个问题来重新定义"><a href="#换一个角度回答三个问题来重新定义" class="headerlink" title="换一个角度回答三个问题来重新定义"></a><strong>换一个角度回答三个问题来重新定义</strong></h4><ul><li>它能做什么 </li><li>它需要什么</li><li>它怎么做</li></ul><p>&nbsp;</p><p><strong>对于第一个问题“它能做什么”，回答是：推荐系统可以把那些最终会在用户（User）和物品（Item）之间产生的连接提前找出来。</strong></p><ol><li>世界的发展趋势是万物倾向于建立越来越多的连接； </li><li>人是这一切趋势的意义所在，为人建立连接是要义； </li><li>根据已有的连接预测和人有关的连接，就是推荐系统。 </li></ol><blockquote><p><em>对应的几个例子</em></p><ol><li>一个社交产品，比如Facebook，如果它的20亿活跃用户之间已经都有社交关系了，那么它的“感兴趣的人”这一推荐系统就该寿终正寝了。从已经建立社交关系的用户身上去推测你还可能对哪些人感兴趣，本质上就是提前把那些可能的用户连接找出来，然后再按照用户分别呈现在每一个人面前。</li><li>一个信息流资讯阅读产品，比如今日头条，只有当用户不断点进源源不断的内容物品中，每一次点击，就是一个连接，每一次阅读也是一个连接，不同层次不同重要性的连接在推荐系统的帮助下不断建立，所主要依据的就是那些已经存在的连接，即：用户过去都点击阅读了哪些内容。</li><li>一个电商平台，用户刚买过什么，常买什么，你正在浏览什么，这些都是用户和物品之间已经存在的连接，用这些连接去预测还会买什么，还会看什么也是推荐系统。</li></ol></blockquote><p><strong>回答第二个问题“它需要什么”：推荐系统需要已经存在的连接，从已有的连接去预测未来的连接。</strong></p><p><strong>对于第三个问题：怎么做？维基百科的定义提供了一个说法：预测用户评分和偏好。这是推荐系统背后相关算法和技术的两大分类，在后面的专栏内容中我会讲到；但比这个定义更抽象的实现方式分类是：机器推荐和人工推荐，也就是通常说的“个性化推荐”和“编辑推荐”。</strong></p><p>&nbsp;</p><h4 id="总结一下推荐系统就是：用已有的连接去预测未来用户和物品之间会出现的连接。那么，你需要推荐系统吗？"><a href="#总结一下推荐系统就是：用已有的连接去预测未来用户和物品之间会出现的连接。那么，你需要推荐系统吗？" class="headerlink" title="总结一下推荐系统就是：用已有的连接去预测未来用户和物品之间会出现的连接。那么，你需要推荐系统吗？"></a><strong>总结一下推荐系统就是：用已有的连接去预测未来用户和物品之间会出现的连接。那么，你需要推荐系统吗？</strong></h4><p>已经根据“能做什么”“需要什么”“怎么做”三个方面，讨论了什么是推荐系统。那么只要前两个条件成熟，你就需要一个推荐系统，至于“怎么做”的问题则简单得多，否则的话就是暂时不需要。那么，如何判断条件是否成熟了呢？我们可以考虑两点。</p><blockquote><p>第一，看看产品的目的。如果一款产品的目的是建立越多连接越好，那么它最终需要一个推荐系统。有哪些产品的目的不是建立连接呢？一种典型的产品就是工具类，如果是单纯提高人类某些工作的效率而存在的产品，比如一个视频编辑器，则不需要。虽然如今很多产品都从工具切入最后做成社区了，至少在工具属性很强时不需要推荐系统。<br>第二，看看产品现有的连接。如果你的产品中物品很少，少到用人工就可以应付过来，那么用户产生的连接肯定不多，因为连接数量的瓶颈在于物品的数量，这时候不适合搭建推荐系统。</p></blockquote><p><strong>长尾理论</strong>可以帮助我们理解，如何把用户和物品各种可能的连接汇总，包括用户属性、物品属性等，应该要有长尾效应才可能让推荐系统发挥效果。这里我介绍一个简单指标，用于判断是不是需要推荐系统：</p><script type="math/tex; mode=display">\frac{\Delta connection}{\Delta user \times \Delta item}</script><blockquote><p>分子是增加的连接数，分母是增加的活跃用户数和增加的有效物品数：<br>如果增加的连接数主要靠增加的活跃用户数和增加的物品数贡献，则该值会较小，不适合加入推荐系统； 如果增加的连接数和新增活跃用户和物品关系不大，那说明连接数已经有自发生长的趋势了，适合加入推荐系统加速这一过程。<br>不过，具体并没有判断标准，因产品而异。</p></blockquote><hr><h2 id="3-【概念篇】个性化推荐系统那些绕不开的经典问题"><a href="#3-【概念篇】个性化推荐系统那些绕不开的经典问题" class="headerlink" title="3.【概念篇】个性化推荐系统那些绕不开的经典问题"></a>3.【概念篇】个性化推荐系统那些绕不开的经典问题</h2><p>推荐系统的预测问题模式，从达成的连接目标角度区分，有两大类： </p><blockquote><ol><li>评分预测； </li><li>行为预测。</li></ol></blockquote><h4 id="评分预测"><a href="#评分预测" class="headerlink" title="评分预测"></a><strong>评分预测</strong></h4><p>评分预测相关算法模型研究的兴盛，最大的助攻是 Netflix 举办的推荐算法大赛。<br>Netflix 比赛的评判标准就是 RMSE ，即均方根误差：</p><script type="math/tex; mode=display">RMSE=\sqrt{\frac{\sum_{t=1}^n (\hat y_t - y_t)^2}{n}}</script><p>这个公式中的t表示每一个样本，n表示总共的样本数，$\hat y_t$就是模型预测出的分数，是我们交的作业，$y_t$就是用户自己打的分数，是标准答案，然后一个样本一个样本地对答案，模型预测分数和用户自己打分相减，这就是我们预测的误差。</p><p>评分预测问题常见于各种点评类产品（如：书影音的点评），但评分类推荐存在以下问题：</p><blockquote><ol><li>数据不易收集，我刚才说过，用户给出评分意味着他已经完成了前面所有的漏斗环节； </li><li>数据质量不能保证，伪造评分数据门槛低，同时真实的评分数据又处在转化漏斗最后一环，门槛高； </li><li>评分的分布不稳定，整体评分在不同时期会差别很大，个人评分在不同时期标准不同，人和人之间的标准差别很大。</li></ol></blockquote><p>用户们给产品施舍的评分数据，我们又叫做显式反馈，意思是他们非常清晰明白地告诉了我们，他们对这个物品的态度；与之相对的还有隐式反馈，通常就是各类用户行为，也就是另一类推荐系统问题：行为预测。</p><h4 id="行为预测"><a href="#行为预测" class="headerlink" title="行为预测"></a><strong>行为预测</strong></h4><p>推荐系统预测行为方式有很多，常见的有两种：</p><ul><li>直接预测行为本身发生的概率</li><li>预测物品的相对排序。</li></ul><p>直接预测用户行为这一类技术，有一个更烂大街的名字，叫做CTR预估。这里的C原本是点击行为Click，但这个解决问题的模式可以引申到任何其他用户行为，如收藏、购买。CTR 意思就是Click Through Rate，即“点击率”。 把每一个推荐给用户的物品按照“会否点击”二分类，构建分类模型，预估其中一种分类的概率，就是 CTR 预估。</p><p>隐式反馈，归纳起来：</p><blockquote><ol><li>数据比显式反馈更加稠密。诚然，评分数据总体来说是很稀疏的，之前Netflix的百万美元挑战赛给出的数据稀疏度大概是 1.2%，毕竟评分数据是要消耗更多注意力的数据。 </li><li>隐式反馈更代表用户的真实想法，比如你不是很赞成川普的观点，但还是想经常看到他的内容（以便吐槽他），这是显式反馈无法捕捉的。而人们在Quora上投出一些赞成票也许只是为了鼓励一下作者，或者表达一些作者的同情，甚至只是因为政治正确而投，实际上对内容很难说真正感兴趣。 </li><li>隐式反馈常常和模型的目标函数关联更密切，也因此通常更容易在AB测试中和测试指标挂钩。这个好理解，比如 CTR 预估当然关注的是点击这个隐式反馈。 </li></ol></blockquote><p><strong>用户给出较高评分的先决条件是用户要有“评分”的行为，所以行为预测解决的是推荐系统的80%问题，评分预测解决的是最后那 20% 的问题.</strong></p><p>几个常见顽疾:</p><blockquote><ol><li>冷启动问题； </li><li>探索与利用问题； </li><li>安全问题。 </li></ol></blockquote><p><strong>冷启动问题</strong><br>本身有伪命题的嫌疑，通常的解决方式就是给它加热：想办法引入数据，想办法从已有数据中主动学习（一种半监督学习）。</p><p><strong>探索与利用问题</strong><br>行话又叫做 EE (Exploit 和 Explore) 问题，一般有三种对待方式： </p><blockquote><ol><li>全部给他推荐他目前肯定感兴趣的物品； </li><li>无视他的兴趣，按照其他逻辑给他推荐，如编辑推荐、随机推荐、按时间先后推荐等等； </li><li>大部分给他推荐感兴趣的，小部分去试探新的兴趣，如同一边收割长好的韭菜，一边播种新的韭菜。</li></ol></blockquote><p><strong>安全问题</strong><br>推荐系统被攻击的影响大致有以下几个： </p><blockquote><ol><li>给出不靠谱的推荐结果，影响用户体验并最终影响品牌形象； </li><li>收集了不靠谱的脏数据，这个影响会一直持续留存在产品中，很难完全消除； </li><li>损失了产品的商业利益，这个是直接的经济损失。</li></ol></blockquote><hr><h2 id="4-【概念篇】这些你必须应该具备的思维模式"><a href="#4-【概念篇】这些你必须应该具备的思维模式" class="headerlink" title="4.【概念篇】这些你必须应该具备的思维模式"></a>4.【概念篇】这些你必须应该具备的思维模式</h2><p>推荐系统的四个关键元素：</p><blockquote><ol><li>UI 和 UE； </li><li>数据； </li><li>领域知识； </li><li>算法。</li></ol></blockquote><p>从上到下的权重大致是 4-3-2-1。其中UI 和 UE ，即人机交互设计和用户体验设计。好的UI 和 UE 才能带来数据的快速积累。UI、UE、数据是一个产品的基石，不论其有没有推荐系统存在都是基石。领域知识，与之对应的是常识和通识，此时业务逻辑显得更为重要。而一种对算法的常见误会就是：短期高估，长期低估。当前面三个要素都达到后，算法的意义就是使得产品的得到一个质的升华。</p><p><strong>目标思维和不确定性思维</strong><br>传统的软件是一个信息流通管道，从信息生产端到信息消费端的通道，比如一款内容App，写内容的可以正常记录，读内容的可以流畅加载，无论多大的并发量都扛得住，这就是一个正常的产品了。但推荐系统这种产品，如果是一个产品的话，它和作为信息流通管道的本质不一样，它是一个信息过滤工具，要解决的问题不是信息流通本身，而是如何让流通更有效率。</p><p>核心词可以表述为：逻辑、因果、分层。通常来说，训练机器学习模型是一个不断小化（或者大化）目标函数的过程。<br>我们把一个推荐系统也看做一个函数，这个函数的输入有很多：UI、UE、数据、领域知识、算法等等，输出则是我们关注的指标：留存率、新闻的阅读时间、电商的 GMV、视频的 VV 等等。<br>目标思维背后是“量化一切”的价值取向。</p><p><strong>确定性思维：它是完全依靠逻辑和因果链条引发而成的，只要初始条件给定，那么结果就是一定的</strong><br><strong>不确定性思维：不用因果逻辑严丝合缝地提前推演，而是用概率的眼光去看结果</strong></p><p>例如:“为什么出现这个”和“出现这个的可能性有多大”</p><p>需要不确定性思维的原因：</p><blockquote><ol><li>绝大多数推荐算法都是概率算法，因此本身就无法保证得到确切结果，只是概率上得到好的效果； </li><li>推荐系统追求的是目标的增长，而不是一城一池的得失； </li><li>如果去花时间为了一个 Case 而增加补丁，那么付出的成本和得到的收益将大打折扣； </li><li>本身出现意外的推荐也是有益的，可以探索用户的新兴趣，这属于推荐系统的一个经典问题：EE 问题。</li></ol></blockquote><p><a href="https://postimg.cc/2qR9P01N" target="_blank" rel="noopener"><img src="https://i.postimg.cc/g0n9L5dj/image.jpg" alt="流程图"></a></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://time.geekbang.org/column/intro/74&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考原作: 推荐系统三十六式-刑无刀&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-【开篇】用知识去对抗技术不平等&quot;&gt;
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="论文解读" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
    
      <category term="推荐系统" scheme="http://yoursite.com/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
